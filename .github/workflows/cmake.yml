name: CI

on: push

env:
  EM_VERSION: 2.0.16
  EM_CACHE_FOLDER: 'emsdk-cache'
  CODECOV_TOKEN: 'f8197851-e753-4291-a835-2d76090f2c92'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Ubuntu GCC,   os: ubuntu-latest,  compiler: g++,     arch: "64", build: "ubuntu64-libstdc++", cmakepp: "",        flags: "-DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_FLAGS='--coverage'"}
        - { name: Ubuntu Clang, os: ubuntu-latest,  compiler: clang++, arch: "64", build: "ubuntu64-libc++",    cmakepp: "",        flags: "-DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS='-stdlib=libc++'"}
        - { name: Windows 32,   os: windows-latest, compiler: vs2019,  arch: "32", build: "win32-vs2019",       cmakepp: "",        flags: "-A Win32"}
        - { name: Windows 64,   os: windows-latest, compiler: vs2019,  arch: "64", build: "win64-vs2019",       cmakepp: "",        flags: "-A x64"}
        - { name: MacOS,        os: macos-latest,   compiler: clang++, arch: "64", build: "osx-libc++",         cmakepp: "",        flags: ""}
        - { name: WebAssembly,  os: ubuntu-latest,  compiler: em++,    arch: "32", build: "wasm32",             cmakepp: "emcmake", flags: "-DCMAKE_CXX_FLAGS='-s DISABLE_EXCEPTION_CATCHING=0' -DCMAKE_CROSSCOMPILING_EMULATOR=node"}
        build-type:
        - Release
        - Debug

    name: ${{matrix.platform.name}} ${{matrix.build-type}}
    runs-on: ${{matrix.platform.os}}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Setup Clang
      if: matrix.platform.compiler == 'clang++' && matrix.platform.os == 'ubuntu-latest'
      run: sudo apt install clang libc++-dev libc++abi-dev

    - name: Setup Emscripten cache
      if: matrix.platform.compiler == 'em++'
      id: cache-system-libraries
      uses: actions/cache@v3.0.4
      with:
        path: ${{env.EM_CACHE_FOLDER}}
        key: ${{env.EM_VERSION}}-${{matrix.platform.name}}-${{matrix.build-type}}

    - name: Setup Emscripten
      if: matrix.platform.compiler == 'em++'
      uses: mymindstorm/setup-emsdk@v11
      with:
        version: ${{env.EM_VERSION}}
        actions-cache-folder: ${{env.EM_CACHE_FOLDER}}

      # GCC 9 has a bug which prevents compilation of the testing framework, so switch to GCC 10.
    - name: Setup GCC
      if: matrix.platform.compiler == 'g++'
      run: |
        sudo apt install g++-10
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
        sudo update-alternatives --set gcc /usr/bin/gcc-10

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: ${{matrix.platform.cmakepp}} cmake .. -DCMAKE_BUILD_TYPE=${{matrix.build-type}} ${{matrix.platform.flags}} -DSNATCH_DO_TEST=1 -DCMAKE_INSTALL_PREFIX=../install

    - name: Build
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config ${{matrix.build-type}} --parallel 2

    - name: Test (with doctest)
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config ${{matrix.build-type}} --target snatch_runtime_tests_run

    - name: Test (with snatch)
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config ${{matrix.build-type}} --target snatch_runtime_tests_self_run

    - name: Test header-only (with snatch)
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config ${{matrix.build-type}} --target snatch_runtime_tests_self_header_only_run

    - name: Compute code coverage
      if: runner.os == 'Linux' && matrix.platform.compiler == 'g++' && matrix.build-type == 'Debug'
      run: |
        gcov ${{github.workspace}}/build/tests/CMakeFiles/snatch_runtime_tests.dir/runtime_tests/*.gcda ${{github.workspace}}/build/tests/CMakeFiles/snatch_runtime_tests_self.dir/runtime_tests/*.gcda
        ls | grep '.gcov' | grep -v snatch | xargs -d"\n" rm
        bash <(curl -s https://codecov.io/bash)

    - name: Install
      if: matrix.build-type == 'Release' && github.ref == 'refs/heads/update'
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{matrix.build-type}} --target install

    - name: Zip full build
      if: matrix.build-type == 'Release' && github.ref == 'refs/heads/update'
      uses: vimtor/action-zip@v1
      working-directory: ${{github.workspace}}
      with:
        files: install/ LICENSE
        dest: snatch-${{matrix.platform.build}}.zip

    - name: Zip header-only
      if: matrix.build-type == 'Release' && github.ref == 'refs/heads/update'
      uses: vimtor/action-zip@v1
      working-directory: ${{github.workspace}}
      with:
        files: install/include/snatch/snatch_all.hpp LICENSE
        dest: snatch-header-only.zip

    - name: Upload build as an artifact
      if: matrix.build-type == 'Release' && github.ref == 'refs/heads/update'
      uses: actions/upload-artifact@v2
      with:
        name: snatch-build
        path: |
          ${{github.workspace}}/snatch-${{matrix.platform.build}}.zip
          ${{github.workspace}}/snatch-header-only.zip

